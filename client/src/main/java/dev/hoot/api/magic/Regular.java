package dev.hoot.api.magic;

import net.runelite.api.widgets.WidgetInfo;

public enum Regular implements Spell
{

	// Teleport spells
	HOME_TELEPORT(0, WidgetInfo.SPELL_LUMBRIDGE_HOME_TELEPORT),
	VARROCK_TELEPORT(25, WidgetInfo.SPELL_VARROCK_TELEPORT),
	LUMBRIDGE_TELEPORT(31, WidgetInfo.SPELL_LUMBRIDGE_TELEPORT),
	FALADOR_TELEPORT(37, WidgetInfo.SPELL_FALADOR_TELEPORT),
	TELEPORT_TO_HOUSE(40, WidgetInfo.SPELL_TELEPORT_TO_HOUSE),
	CAMELOT_TELEPORT(45, WidgetInfo.SPELL_CAMELOT_TELEPORT),
	ARDOUGNE_TELEPORT(51, WidgetInfo.SPELL_ARDOUGNE_TELEPORT),
	WATCHTOWER_TELEPORT(58, WidgetInfo.SPELL_WATCHTOWER_TELEPORT),
	TROLLHEIM_TELEPORT(61, WidgetInfo.SPELL_TROLLHEIM_TELEPORT),
	TELEPORT_TO_APE_ATOLL(64, WidgetInfo.SPELL_TELEPORT_TO_APE_ATOLL),
	TELEPORT_TO_KOUREND(69, WidgetInfo.SPELL_TELEPORT_TO_KOUREND),
	TELEOTHER_LUMBRIDGE(74, WidgetInfo.SPELL_TELEOTHER_LUMBRIDGE),
	TELEOTHER_FALADOR(82, WidgetInfo.SPELL_TELEOTHER_FALADOR),
	TELEPORT_TO_BOUNTY_TARGET(85, WidgetInfo.SPELL_BOUNTY_TARGET_TELEPORT),
	TELEOTHER_CAMELOT(90, WidgetInfo.SPELL_TELEOTHER_CAMELOT),

	// Strike spells
	WIND_STRIKE(1, WidgetInfo.SPELL_WIND_STRIKE),
	WATER_STRIKE(5, WidgetInfo.SPELL_WATER_STRIKE),
	EARTH_STRIKE(9, WidgetInfo.SPELL_EARTH_STRIKE),
	FIRE_STRIKE(13, WidgetInfo.SPELL_FIRE_STRIKE),

	// Bolt spells
	WIND_BOLT(17, WidgetInfo.SPELL_WIND_BOLT),
	WATER_BOLT(23, WidgetInfo.SPELL_WATER_BOLT),
	EARTH_BOLT(29, WidgetInfo.SPELL_EARTH_BOLT),
	FIRE_BOLT(35, WidgetInfo.SPELL_FIRE_BOLT),

	// Blast spells
	WIND_BLAST(41, WidgetInfo.SPELL_WIND_BLAST),
	WATER_BLAST(47, WidgetInfo.SPELL_WATER_BLAST),
	EARTH_BLAST(53, WidgetInfo.SPELL_EARTH_BLAST),
	FIRE_BLAST(59, WidgetInfo.SPELL_FIRE_BLAST),

	// Wave spells
	WIND_WAVE(62, WidgetInfo.SPELL_WIND_WAVE),
	WATER_WAVE(65, WidgetInfo.SPELL_WATER_WAVE),
	EARTH_WAVE(70, WidgetInfo.SPELL_EARTH_WAVE),
	FIRE_WAVE(75, WidgetInfo.SPELL_FIRE_WAVE),

	// Surge spells
	WIND_SURGE(81, WidgetInfo.SPELL_WIND_SURGE),
	WATER_SURGE(85, WidgetInfo.SPELL_WATER_SURGE),
	EARTH_SURGE(90, WidgetInfo.SPELL_EARTH_SURGE),
	FIRE_SURGE(95, WidgetInfo.SPELL_FIRE_SURGE),

	// God spells
	SARADOMIN_STRIKE(60, WidgetInfo.SPELL_SARADOMIN_STRIKE),
	CLAWS_OF_GUTHIX(60, WidgetInfo.SPELL_CLAWS_OF_GUTHIX),
	FLAMES_OF_ZAMORAK(60, WidgetInfo.SPELL_FLAMES_OF_ZAMORAK),

	// Other combat spells
	CRUMBLE_UNDEAD(39, WidgetInfo.SPELL_CRUMBLE_UNDEAD),
	IBAN_BLAST(50, WidgetInfo.SPELL_IBAN_BLAST),
	MAGIC_DART(50, WidgetInfo.SPELL_MAGIC_DART),

	// Curse spells
	CONFUSE(3, WidgetInfo.SPELL_CONFUSE),
	WEAKEN(11, WidgetInfo.SPELL_WEAKEN),
	CURSE(19, WidgetInfo.SPELL_CURSE),
	BIND(20, WidgetInfo.SPELL_BIND),
	SNARE(50, WidgetInfo.SPELL_SNARE),
	VULNERABILITY(66, WidgetInfo.SPELL_VULNERABILITY),
	ENFEEBLE(73, WidgetInfo.SPELL_ENFEEBLE),
	ENTANGLE(79, WidgetInfo.SPELL_ENTANGLE),
	STUN(80, WidgetInfo.SPELL_STUN),
	TELE_BLOCK(85, WidgetInfo.SPELL_TELE_BLOCK),

	// Support spells
	CHARGE(80, WidgetInfo.SPELL_CHARGE),

	// Utility spells
	BONES_TO_BANANAS(15, WidgetInfo.SPELL_BONES_TO_BANANAS),
	LOW_LEVEL_ALCHEMY(21, WidgetInfo.SPELL_LOW_LEVEL_ALCHEMY),
	SUPERHEAT_ITEM(43, WidgetInfo.SPELL_SUPERHEAT_ITEM),
	HIGH_LEVEL_ALCHEMY(55, WidgetInfo.SPELL_HIGH_LEVEL_ALCHEMY),
	BONES_TO_PEACHES(60, WidgetInfo.SPELL_BONES_TO_PEACHES),

	// Enchantment spells
	LVL_1_ENCHANT(7, WidgetInfo.SPELL_LVL_1_ENCHANT),
	LVL_2_ENCHANT(27, WidgetInfo.SPELL_LVL_2_ENCHANT),
	LVL_3_ENCHANT(49, WidgetInfo.SPELL_LVL_3_ENCHANT),
	CHARGE_WATER_ORB(56, WidgetInfo.SPELL_CHARGE_WATER_ORB),
	LVL_4_ENCHANT(57, WidgetInfo.SPELL_LVL_4_ENCHANT),
	CHARGE_EARTH_ORB(60, WidgetInfo.SPELL_CHARGE_EARTH_ORB),
	CHARGE_FIRE_ORB(63, WidgetInfo.SPELL_CHARGE_FIRE_ORB),
	CHARGE_AIR_ORB(66, WidgetInfo.SPELL_CHARGE_AIR_ORB),
	LVL_5_ENCHANT(68, WidgetInfo.SPELL_LVL_5_ENCHANT),
	LVL_6_ENCHANT(87, WidgetInfo.SPELL_LVL_6_ENCHANT),
	LVL_7_ENCHANT(93, WidgetInfo.SPELL_LVL_7_ENCHANT),

	// Other spells
	TELEKINETIC_GRAB(31, WidgetInfo.SPELL_TELEKINETIC_GRAB),

	;


	private final int level;
	private final WidgetInfo widgetInfo;

	Regular(int level, WidgetInfo widgetInfo)
	{
		this.level = level;
		this.widgetInfo = widgetInfo;
	}

	@Override
	public int getLevel()
	{
		return level;
	}

	@Override
	public WidgetInfo getWidget()
	{
		return widgetInfo;
	}
}
